@page "/"
@using WarmupGen.Core
@inject IJSRuntime JSRuntime

<PageTitle>Create Warmup</PageTitle>

<script language="javascript">
	window.clipboardCopy = {
		copyText: function (text) {
			navigator.clipboard.writeText(text).then(function () {
				alert("Copied to clipboard!");
			})
				.catch(function (error) {
					alert(error);
				});
		}
	}
</script>

<EditForm Model="@CurrentWarmup">

	<table class="table warmup">
		<thead>
			<tr>
				<th scope="col" colspan="2"><h1>Warmup</h1></th>
				
				<th>
					<button class="btn btn-primary btn-sm" @onclick="CopyWarmupToClipboard">
						<span class="oi oi-clipboard" aria-hidden="true"></span>
					</button>
				</th>

				<th scope="col">
					<button class="btn btn-primary btn-sm" @onclick="() => CurrentWarmup.AddSegment()">
						<span class="oi oi-plus" aria-hidden="true"></span>
					</button>
				</th>
			</tr>
		</thead>
		<tbody>

			@foreach (var segment in CurrentWarmup.Segments)
			{
				string collapseId = $"collapse{n++}";

				<tr class="@GetSegmentClass(segment)" @oncustomtransitionend="args => RemoveSegment(args, segment)">

					<td>@segment.Exercise.Name</td>

					<td>
						<button class="btn btn-primary btn-sm" @onclick="() => CurrentWarmup.Reroll(segment)">
							<span class="oi oi-reload" aria-hidden="true"></span>
						</button>
					</td>

					<td>
						<button class="btn btn-primary btn-sm" data-toggle="collapse" data-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
							<span class="oi oi-caret-bottom pull-right" aria-hidden="true"></span>
							<span class="oi oi-caret-top pull-right" aria-hidden="true"></span>
						</button>
					</td>

					<td>
						<button class="btn btn-primary btn-sm" @onclick="() => MarkSegmentForRemoval(segment)"><span class="oi oi-trash" aria-hidden="true"></span></button>
					</td>

				</tr>

				<tr class="collapse" id="@collapseId">

					@{
						// TODO Figure out how have a button at the top that opens/closes all of them
					}

					<td colspan="4">
						<table class="table table-borderless">
							<tr>
								<td>
									Target:
								</td>
								<td>
									@{
										// TODO Figure out why the bottom edge of the dropdown is cut off
									}

									<InputSelect @bind-Value="segment.Target" class="form-select">
										<option value="">Any</option>
										@foreach (var target in Generator.Targets)
										{
											<option value="@target">@target</option>
										}
									</InputSelect>
								</td>
							</tr>
							<tr>
								<td>
									Technique:
								</td>
								<td>
									<InputSelect @bind-Value="segment.Technique" class="form-select">
										<option value="">Any</option>
										@foreach (var technique in Generator.Techniques)
										{
											<option value="@technique">@technique</option>
										}
									</InputSelect>
								</td>
							</tr>
						</table>
					</td>
				</tr>
			}
		</tbody>
	</table>
</EditForm>



@code {
	const int defaultSegmentCount = 5;
	private Warmup? _warmup;
	int n = 0;

	List<Segment> _toRemove = new List<Segment>();

	Warmup CurrentWarmup
	{
		get
		{
			if (_warmup is null)
			{
				_warmup = Generator.GenerateWarmup(defaultSegmentCount);
			}
			return _warmup;
		}
	}

	protected override void OnInitialized()
	{
		n = 0;
	}

	void MarkSegmentForRemoval(Segment segment)
	{
		_toRemove.Add(segment);
		StateHasChanged();
	}

	void RemoveSegment(CustomTransitionEndEventArgs args, Segment segment)
	{
		if (args?.PropertyName == "opacity" && _toRemove.Remove(segment))
		{
			CurrentWarmup.Remove(segment);
		}
	}

	string GetSegmentClass(Segment segment)
	{
		if (_toRemove.Contains(segment))
		{
			return "removing";
		}

		return "normal";
	}

	private async Task CopyWarmupToClipboard()
	{
		await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", CurrentWarmup.AsList());
	}
}
